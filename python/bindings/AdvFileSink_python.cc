/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(AdvFileSink.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f29dbf3c3aa39842ad84935b5a60c857)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <filerepeater/AdvFileSink.h>
// pydoc.h is automatically generated in the build directory
#include <AdvFileSink_pydoc.h>

void bind_AdvFileSink(py::module& m)
{

    using AdvFileSink    = ::gr::filerepeater::AdvFileSink;


    py::class_<AdvFileSink, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<AdvFileSink>>(m, "AdvFileSink", D(AdvFileSink))

        .def(py::init(&AdvFileSink::make),
           py::arg("datatype"),
           py::arg("itemsize"),
           py::arg("basedir"),
           py::arg("basefile"),
           py::arg("freq"),
           py::arg("sampleRate"),
           py::arg("maxSize"),
           py::arg("maxTimeSec"),
           py::arg("startRecordingImmediately"),
           py::arg("freqCallback"),
           py::arg("autostartFreqChange"),
           py::arg("bits_per_sample"),
           py::arg("bUnbuffered"),
           py::arg("honorFreqTags"),
           D(AdvFileSink,make)
        )
        




        
        .def("getCenterFrequency",&AdvFileSink::getCenterFrequency,       
            D(AdvFileSink,getCenterFrequency)
        )


        
        .def("setCenterFrequency",&AdvFileSink::setCenterFrequency,       
            py::arg("newValue"),
            D(AdvFileSink,setCenterFrequency)
        )


        
        .def("getTest",&AdvFileSink::getTest,       
            D(AdvFileSink,getTest)
        )


        
        .def("setTest",&AdvFileSink::setTest,       
            py::arg("newValue"),
            D(AdvFileSink,setTest)
        )


        
        .def("getTestFloat",&AdvFileSink::getTestFloat,       
            D(AdvFileSink,getTestFloat)
        )


        
        .def("setTestFloat",&AdvFileSink::setTestFloat,       
            py::arg("newValue"),
            D(AdvFileSink,setTestFloat)
        )

        ;




}








